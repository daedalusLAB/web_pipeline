FROM ubuntu:22.04

RUN apt-get update -qq && apt-get install --no-install-recommends -y \
build-essential libpq-dev curl gnupg2 

# Install openpose
RUN apt-get update && \
DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
python3-dev python3-pip python3-setuptools git g++ wget make libprotobuf-dev protobuf-compiler libopencv-dev \
libgoogle-glog-dev libboost-all-dev libhdf5-dev libatlas-base-dev vim bash ruby

#for python api
RUN pip3 install --upgrade pip
RUN pip3 install numpy opencv-python

#replace cmake as old version has CUDA variable bugs
RUN wget https://github.com/Kitware/CMake/releases/download/v3.16.0/cmake-3.16.0-Linux-x86_64.tar.gz && \
tar xzf cmake-3.16.0-Linux-x86_64.tar.gz -C /opt && \
rm cmake-3.16.0-Linux-x86_64.tar.gz
ENV PATH="/opt/cmake-3.16.0-Linux-x86_64/bin:${PATH}"

# INSTALL CUDA
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.0-1_all.deb && \
dpkg -i cuda-keyring_1.0-1_all.deb && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install cuda-11-7 libcudnn8-dev  libcudnn8

RUN apt-get install python-is-python3 && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#get openpose
WORKDIR /openpose
RUN git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.git .

#build it
WORKDIR /openpose/build
RUN cmake -DBUILD_PYTHON=ON .. && make -j `nproc`

RUN cd /openpose/build/python/openpose && make install && \
cd /openpose/build/python/openpose && cp ./pyopenpose.cpython-310-x86_64-linux-gnu.so /usr/local/lib/python3.10/dist-packages && cd /usr/local/lib/python3.10/dist-packages && \
ln -s pyopenpose.cpython-310-x86_64-linux-gnu.so pyopenpose
ENV LD_LIBRARY_PATH=/openpose/build/python/openpose
RUN cd /openpose/models && bash getModels.sh


## Install Whisper timestamped
RUN pip install git+https://github.com/linto-ai/whisper-timestamped


# Install R and R packages
RUN apt-get update && apt-get install -y r-base

SHELL ["/bin/bash", "-l", "-c"]
ENV PATH /usr/local/rvm/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Install ruby
RUN curl -sSL https://get.rvm.io | bash
RUN /bin/bash -l -c " /etc/profile.d/rvm.sh && rvm install --default 3.2.2"
RUN rvm use --default 3.2.2

# Layer 2. Creating environment variables which used further in Dockerfile.
ENV APP_HOME /app

# Layer 3. Adding config options for bundler.
RUN /bin/bash -l -c " echo \"gem: --no-rdoc --no-ri\" > /etc/gemrc && gem install nokogiri --platform=ruby "

# Layer 4. Creating and specifying the directory in which the application will be placed.
WORKDIR $APP_HOME

# Layer 5. Copying Gemfile and Gemfile.lock.
COPY Gemfile Gemfile.lock ./

# Layer 6. Installing dependencies.
#RUN /bin/bash -l -c "bundle check || bundle install --jobs 20 --retry 5 "

# Layer 7. Copying full application.
COPY . .

# Layer 8. Make file executable
RUN chmod +x ./dev-docker-entrypoint.sh

# Layer 9. Run migrations
#ENTRYPOINT ["/bin/bash", "-l", "-c", "./dev-docker-entrypoint.sh"]

# Layer 10. Command to run application.
#CMD ["/bin/bash", "-l", "-c", "rails", "s", "-e", "development", "-p", "3000", "-b", "0.0.0.0"]
CMD ["sleep", "infinity"]
